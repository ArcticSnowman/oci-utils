#!/usr/bin/env bash
set -euo pipefail

COMPARTMENT=""
CMPID=""
CLUSTER=""
CLUSTERID=""
NODEPOOL=""
NODEPOOLID=""
NODE=""
APPLY="echo"

function usage() {
  echo "Usage: $0 --compartment <compartment-name> --cluster <cluster-name> [--nodepool <nodepool-name>] [--debug]"
  echo ""
  echo "Options:"
  echo "  --compartment   Name of the compartment (required)"
  echo "  --cluster       Name of the cluster (required)"
  echo "  --nodepool      Name of the node pool (optional)"
  echo "  --debug         Enable debug mode (optional)"
  echo "  --yes           Apply changes (optional, default is dry-run)"
  echo "  --help|-h      Show this help message"
  exit 1
}

# Get the direcory of the current script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

. "$SCRIPT_DIR/oci-functions.sh"

while [[ $# -gt 0 ]]; do
  case $1 in
    --compartment)
      COMPARTMENT="$2"
      shift # past argument
      shift # past value
      ;;
    --cluster)
      CLUSTER="$2"
      shift # past argument
      shift # past value
      ;;
    --nodepool)
      NODEPOOL="$2"
      shift # past argument
      shift # past value
      ;;
    --yes)
      APPLY=""
      shift # past argument
      shift # past value
      ;;
    --debug)
      set -x
      shift # past argument
      ;;
    --help|-h)
      usage
      ;;
    *) 
      echo "Unknown option: $1"
      usage
      ;;
  esac
done

# if [! -z "$OCI_COMPARTMENT" ] && [ -z "$COMPARTMENT" ]; then
#   COMPARTMENT="$OCI_COMPARTMENT"
# fi

CMPID=$(get_compartment_id "$COMPARTMENT")
if [ -z "$CMPID" ]; then
  echo "Compartment $COMPARTMENT not found"
  usage
fi

CLUSTERID=$(get_cluster_id "$CMPID" "$CLUSTER")
if [ -z "$CLUSTERID" ]; then
  echo "Cluster $CLUSTER not found in compartment $COMPARTMENT"
  usage
fi

NODEPOOLID=$(get_nodepool_id "$CMPID" "$CLUSTERID" "$NODEPOOL")
if [ -z "$NODEPOOLID" ]; then
  echo "Node Pool $NODEPOOL not found in cluster $CLUSTER"
  usage
fi

echo "Recycling node pool $NODEPOOL in cluster $CLUSTER in compartment $COMPARTMENT"

OCIUPDATE="$APPLY oci ce node-pool update --node-pool-id $NODEPOOLID"
OCIGET="oci ce node-pool get --node-pool-id $NODEPOOLID"

# Extract list of node freeform tags
NODETAGS=$($OCIGET  --query 'data."node-config-details"."freeform-tags"' --raw-output )
# Update LastUpdated to current time stamp
NODETAGS=$(echo "$NODETAGS" | jq --arg ts "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" '.["LastUpdated"] = $ts')

# Update tag and trigger recycle
if [ $APPLY == "echo" ]; then
  echo "Would update node pool with tags: $NODETAGS"
else
  echo "Updating node pool with tags: $NODETAGS"
fi


$OCIUPDATE --node-freeform-tags "$NODETAGS" --node-pool-cycling-details '{"isNodeCyclingEnabled":true,"maximumSurge":"100%","maximumUnavailable":"100%"}' --wait-for-state SUCCEEDED

# disable recycling
$OCIUPDATE --node-pool-cycling-details '{"isNodeCyclingEnabled":false,"maximumSurge":"100%","maximumUnavailable":"100%"}' --wait-for-state SUCCEEDED

